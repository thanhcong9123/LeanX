@model EBook

@using LearnX_Data.Entities

@using System.IO

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>@Model.Title - Book Reader</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />

    <!-- PDF.js CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf_viewer.min.css" />

    <style>
        body {
            background-color: #f4f6f9;
        }

        .reader-container {
            background: #fff;
            border-radius: 16px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
            padding: 30px;
        }

        .pdf-viewer {
            height: 700px;
            overflow-y: auto;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 10px;
            background: #fefefe;
        }

        canvas {
            display: block;
            margin: 20px auto;
            padding: 10px;
            max-width: 800px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 0 12px rgba(0, 0, 0, 0.1);
        }


        .book-sidebar {
            background: #ffffff;
            border-radius: 16px;
            padding: 20px;
            box-shadow: 0 0 12px rgba(0, 0, 0, 0.05);
        }
    </style>
</head>

<body>

    <div class="container my-5">
        <div class="row">
            <!-- Content Reader -->
            <div class="col-lg-8">
                <div class="reader-container">
                    <h2 class="mb-3"><i class="fas fa-book-open"></i> @Model.Title</h2>
                    <p class="text-muted mb-4">@Model.Description</p>

                    @if (!string.IsNullOrEmpty(Model.FilePath))
                    {
                        <div id="pdf-viewer" class="pdf-viewer"></div>

                        <div class="mt-4 d-flex justify-content-between align-items-center">
                            <a href="@Url.Action("Download", "EBooks", new { id = Model.Id })" class="btn btn-primary">
                                <i class="fas fa-download"></i> Download Book
                            </a>
                            <a href="@Url.Action("Index", "EBook")" class="btn btn-outline-secondary">
                                <i class="fas fa-arrow-left"></i> Back to List
                            </a>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-danger mt-3">
                            <strong>Notice:</strong> No file available for this book.
                        </div>
                    }
                </div>
            </div>

            <!-- Sidebar -->
            <div class="col-lg-4 mt-4 mt-lg-0">
                <div class="book-sidebar">
                    <h5 class="mb-3">Book Info</h5>
                    <p><strong>Title:</strong> @Model.Title</p>
                    <p><strong>Description:</strong> @Model.Description</p>
                    <p><strong>Uploaded:</strong> @Model.UploadedAt.ToString("dd/MM/yyyy")</p>
                    <p><strong>File Path:</strong> @Model.FilePath</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap & PDF.js Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.worker.min.js"></script>

    <script>
        const url = '/FileBook/@Model.FilePath';
        const container = document.getElementById('pdf-viewer');
        const loadingTask = pdfjsLib.getDocument(url);

        loadingTask.promise.then(function (pdf) {
            for (let pageNumber = 1; pageNumber <= pdf.numPages; pageNumber++) {
                pdf.getPage(pageNumber).then(function (page) {
                    const scale = 1.5;
                    const viewport = page.getViewport({ scale: scale });

                    const canvas = document.createElement("canvas");
                    canvas.style.marginBottom = "20px";
                    const context = canvas.getContext("2d");
                    canvas.height = viewport.height;
                    canvas.width = viewport.width;

                    const renderContext = {
                        canvasContext: context,
                        viewport: viewport
                    };

                    page.render(renderContext).promise.then(function () {
                        container.appendChild(canvas);
                    });
                });
            }
        }).catch(function (error) {
            container.innerHTML = `<div class="alert alert-danger">Error loading PDF: ${error.message}</div>`;
        });
    </script>

</body>

</html>
